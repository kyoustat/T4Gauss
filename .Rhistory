class(gmmlist[[1]])
gmmlist[[1]]
class(cl1)
cl1
rm(list=ls())
x1 = rmvnorm(50, mean=rep(-1,4))
x2 = rmvnorm(50, mean=rep(+1,4))
xx = rbind(x1, x2)
cl1 = fitgmm(xx, k=1)
cl2 = fitgmm(xx, k=2)
cl3 = fitgmm(xx, k=3)
gmmlist = list()
gmmlist[[1]] = cl1
gmmlist[[2]] = cl2
gmmlist[[3]] = cl3
class(cl1)
x1 = rmvnorm(50, mean=rep(-1,4))
x2 = rmvnorm(50, mean=rep(+1,4))
xx = rbind(x1, x2)
cl1 = fitgmm(xx, k=1)
cl2 = fitgmm(xx, k=2)
cl3 = fitgmm(xx, k=3)
gmmlist = list()
gmmlist[[1]] = cl1$gmmobj
gmmlist[[2]] = cl2$gmmobj
gmmlist[[3]] = cl3$gmmobj
extract_dimension <- function(myobj){
return(round(myobj$wglist[[1]]$dimension))
}
cond1 = is.list(gmmlist)
cond2 = (all(unlist(lapply(gmmlist, inherits, "wrapgmm"))==TRUE))
cond3 = (length(unique(unlist(lapply(gmmlist, extract_dimension))))==1)
cond1
cond2
cond3
mynlist = length(gmmlist)
myk     = 2
gmmlist[[1]]
gmmlist[[1]]$weight
n=1
tgtobj = gmmlist[[n]]
tgtobj$wglist
tgtobj$tgtobj
tgtobj$weight
array(0,c(5,2))
gmmlist
#######################################################
# Rearrange
#   weights : mynlist x sum(length(weights))
for (n in 1:mynlist){
tgtobj = gmmlist[[n]]
if (n < 2){
arr.props = matrix(tgtobj$weight, nrow=1)
arr.comps = tgtobj$weight
} else {
counter = length(tgtobj$weight)
arr.comps = c(arr.comps, tgtobj$wglist) # concatenate components
arr.props = rbind(cbind(arr.prop, array(0,c(nrow(arr.prop),counter))),c(rep(0,ncol(arr.prop)), as.vector(tgtobj$weight)))
}
}
#######################################################
# Rearrange
#   weights : mynlist x sum(length(weights))
for (n in 1:mynlist){
tgtobj = gmmlist[[n]]
if (n < 2){
arr.props = matrix(tgtobj$weight, nrow=1)
arr.comps = tgtobj$weight
} else {
counter = length(tgtobj$weight)
arr.comps = c(arr.comps, tgtobj$wglist) # concatenate components
arr.props = rbind(cbind(arr.prop, array(0,c(nrow(arr.props),counter))),c(rep(0,ncol(arr.props)), as.vector(tgtobj$weight)))
}
}
#######################################################
# Rearrange
#   weights : mynlist x sum(length(weights))
for (n in 1:mynlist){
tgtobj = gmmlist[[n]]
if (n < 2){
arr.props = matrix(tgtobj$weight, nrow=1)
arr.comps = tgtobj$weight
} else {
counter = length(tgtobj$weight)
arr.comps = c(arr.comps, tgtobj$wglist) # concatenate components
arr.props = rbind(cbind(arr.props, array(0,c(nrow(arr.props),counter))),c(rep(0,ncol(arr.props)), as.vector(tgtobj$weight)))
}
}
arr.props
arr.comps
clabel = gauss.kmeans(arr.comps, k=myk)$cluster
arr.comps
clabel = gauss.kmedoids(arr.comps, k=myk)
arr.props
arr.comps
mylist = list()
for (i in 1:10){
mylist[[i]] = wrapgauss1d(mean=-2-runif(1), sd=runif(1))
}
for (i in 11:20){
mylist[[i]] = wrapgauss1d(mean=0, sd=runif(1))
}
for (i in 21:30){
mylist[[i]] = wrapgauss1d(mean=2+runif(1), sd=runif(1))
}
mylist
arr.comps
mylist
gauss.kmedoids(arr.comps, k=2)
gauss.kmedoids(arr.comps, k=3)
class(arr.comps)
class(mylist)
class(mylist[[1]])
class(arr.comps[[1]])
arr.comps
x1 = rmvnorm(50, mean=rep(-1,4))
x2 = rmvnorm(50, mean=rep(+1,4))
xx = rbind(x1, x2)
cl1 = fitgmm(xx, k=1)
cl2 = fitgmm(xx, k=2)
cl3 = fitgmm(xx, k=3)
gmmlist = list()
gmmlist[[1]] = cl1$gmmobj
gmmlist[[2]] = cl2$gmmobj
gmmlist[[3]] = cl3$gmmobj
#######################################################
# Rearrange
#   arr.props (weights)    : mynlist x sum(length(weights))
#   arr.comps (components) : list of 'wrapgauss' length sum(length(weights))
for (n in 1:mynlist){
tgtobj = gmmlist[[n]]
if (n < 2){
arr.props = matrix(tgtobj$weight, nrow=1)
arr.comps = tgtobj$weight
} else {
counter = length(tgtobj$weight)
arr.comps = c(arr.comps, tgtobj$wglist) # concatenate components
arr.props = rbind(cbind(arr.props, array(0,c(nrow(arr.props),counter))),c(rep(0,ncol(arr.props)), as.vector(tgtobj$weight)))
}
}
arr.comps
#######################################################
# Rearrange
#   arr.props (weights)    : mynlist x sum(length(weights))
#   arr.comps (components) : list of 'wrapgauss' length sum(length(weights))
for (n in 1:mynlist){
tgtobj = gmmlist[[n]]
if (n < 2){
arr.props = matrix(tgtobj$weight, nrow=1)
arr.comps = tgtobj$wglist
} else {
counter = length(tgtobj$weight)
arr.comps = c(arr.comps, tgtobj$wglist) # concatenate components
arr.props = rbind(cbind(arr.props, array(0,c(nrow(arr.props),counter))),c(rep(0,ncol(arr.props)), as.vector(tgtobj$weight)))
}
}
clabel = gauss.kmedoids(arr.comps, k=myk)
clabel
clabel = gauss.kmedoids(arr.comps, k=myk)$clustering
clabel
clist = gauss.kmeans.center(arr.comps, clabel, myk, "wass2") # use 'wass2' center
arr.props
mynlist
#######################################################
# Step 2. Merge Component Weights
ulabel  = unique(clabel)
cprops  = array(0,c(mynlist, length(ulabel)))
for (i in 1:length(ulabel)){
idnow = which(clabel==ulabel[i])
if (length(idnow)==1){
cprops[,i] = arr.props[,idnow]
} else {
cprops[,i] = base::rowSums(arr.props[,idnow])
}
}
cprops
library(RiemSphere)
help("mle.spnorm")
#######################################################
# Step 3. Use RiemSphere
mle.spnorm(sqrt(cprops), method="Optimize")
#################################################################
# Step 3. Use RiemSphere to compute mean element of Simplex
as.vector(mle.spnorm(sqrt(cprops), method="Optimize")$mu)
#################################################################
# Step 3. Use RiemSphere to compute mean element of Simplex
(as.vector(mle.spnorm(sqrt(cprops), method="Optimize")$mu)^2)
#################################################################
# Step 3. Use RiemSphere to compute mean element of Simplex
sum(as.vector(mle.spnorm(sqrt(cprops), method="Optimize")$mu)^2)
#################################################################
# Step 3. Use RiemSphere to compute mean element of Simplex
cweight = (as.vector(mle.spnorm(sqrt(cprops), method="Optimize")$mu)^2)
cweight
library(T4Gauss)
library(T4Gauss)
library(T4Gauss)
## personal experiment with microbenchmark
library(microbenchmark)
mylist5d = list()
mycovs   = list()
for (i in 1:50){
my.ctd = stats::runif(5, min=-0.5, max=0.5)
my.sig = stats::cov(matrix(T4Gauss::rnorm(100*5),ncol=5))
mycovs[[i]] = my.sig
mylist5d[[i]] = wrapgaussNd(mu=my.ctd, sigma=my.sig)
}
microbenchmark(
fpt = gauss.barycenter(mylist5d, type="wass2fpt"),
rgd0 = gauss.barycenter(mylist5d, type="wass2rgd"),
rgd3 = gauss.barycenter(mylist5d, type="wass2rgd", nthreads = 3),
rgd6 = gauss.barycenter(mylist5d, type="wass2rgd", nthreads = 6),
rgd9 = gauss.barycenter(mylist5d, type="wass2rgd", nthreads = 9)
)
## personal experiment with microbenchmark
library(microbenchmark)
mylist5d = list()
mycovs   = list()
for (i in 1:50){
my.ctd = stats::runif(5, min=-0.5, max=0.5)
my.sig = stats::cov(matrix(T4Gauss::rnorm(100*5),ncol=5))
mycovs[[i]] = my.sig
mylist5d[[i]] = wrapgaussNd(mu=my.ctd, sigma=my.sig)
}
microbenchmark(
fpt = gauss.barycenter(mylist5d, type="wass2fpt"),
rgd0 = gauss.barycenter(mylist5d, type="wass2rgd"),
rgd3 = gauss.barycenter(mylist5d, type="wass2rgd", nthreads = 3),
rgd6 = gauss.barycenter(mylist5d, type="wass2rgd", nthreads = 6),
rgd9 = gauss.barycenter(mylist5d, type="wass2rgd", nthreads = 9)
)
library(T4Gauss)
## personal experiment with microbenchmark
library(microbenchmark)
mylist5d = list()
mycovs   = list()
for (i in 1:50){
my.ctd = stats::runif(5, min=-0.5, max=0.5)
my.sig = stats::cov(matrix(T4Gauss::rnorm(100*5),ncol=5))
mycovs[[i]] = my.sig
mylist5d[[i]] = wrapgaussNd(mu=my.ctd, sigma=my.sig)
}
microbenchmark(
fpt = gauss.barycenter(mylist5d, type="wass2fpt"),
rgd0 = gauss.barycenter(mylist5d, type="wass2rgd"),
rgd3 = gauss.barycenter(mylist5d, type="wass2rgd", nthreads = 3),
rgd6 = gauss.barycenter(mylist5d, type="wass2rgd", nthreads = 6),
rgd9 = gauss.barycenter(mylist5d, type="wass2rgd", nthreads = 9)
)
## personal experiment with microbenchmark
library(microbenchmark)
mylist5d = list()
mycovs   = list()
for (i in 1:50){
my.ctd = stats::runif(5, min=-0.5, max=0.5)
my.sig = stats::cov(matrix(T4Gauss::rnorm(100*5),ncol=5))
mycovs[[i]] = my.sig
mylist5d[[i]] = wrapgaussNd(mu=my.ctd, sigma=my.sig)
}
microbenchmark(
fpt = gauss.barycenter(mylist5d, type="wass2fpt"),
rgd0 = gauss.barycenter(mylist5d, type="wass2rgd"),
rgd3 = gauss.barycenter(mylist5d, type="wass2rgd", nthreads = 3),
rgd6 = gauss.barycenter(mylist5d, type="wass2rgd", nthreads = 6),
rgd9 = gauss.barycenter(mylist5d, type="wass2rgd", nthreads = 9)
)
library(T4Gauss)
library(T4Gauss)
library(T4Gauss)
library(RiemBase)
X = matrix(rnorm(5*2),ncol=2)
xx = riemfactory(X, name = "euclidean")
rbase.median(xx)
B = matrix(rnorm(100),nrow=5)
B = t(B)%*%B
C = matrix(runif(100),ncol=5)
C = t(C)%*%C
B = matrix(rnorm(100),ncol=5)
B = t(B)%*%B
C = matrix(runif(100),ncol=5)
C = t(C)%*%C
dim(B)
dim(C)
sum(diag(B+C-2*expm::sqrtm(B%*%C)))
tmp = (expm::sqrtm(B%*%C) + expm::sqrtm(C%*%B) - 2*C)
val1 = sqrt(sum(diag(tmp%*%C%*%tmp)))
val2 = sum(diag(B+C-2*expm::sqrtm(B%*%C))) # direct
val1
val2
val1 = sqrt(sum(diag(tmp%*%tmp)))
val1
val2
eigen(B)
eigen(C)
tmp = (expm::sqrtm(B%*%C) + expm::sqrtm(C%*%B) - 2*C)
sqrt(sum(diag(tmp%*%C%*%tmp)))
sum(diag(B+C-2*expm::sqrtm(B%*%C))) # direct
sqrt(sum(diag(tmp%*%C%*%tmp)))
sqrt(sum(diag(tmp%*%B%*%tmp)))
sqrt(sum(diag(tvec%*%C%*%tvec)))
tvec = (expm::sqrtm(B%*%C) + expm::sqrtm(C%*%B) - 2*C)
sqrt(sum(diag(tvec%*%C%*%tvec)))
sum(diag(B+C-2*expm::sqrtm(B%*%C))) # direct
sum(diag(B+C-2*expm::sqrtm(B%*%C))) # direct
sum(diag(B+C-2*expm::sqrtm(C%*%B)))
isSymmetric(tvec)
sqrt(sum(diag(tvec%*%B%*%tvec)))
sqrt(sum(diag(tvec%*%C%*%tvec)))
sqrt(sum(diag(tvec%*%tvec)))
sum(diag(B+C-2*expm::sqrtm(B%*%C))) # direct
sqrt(sum(diag(tvec%*%C%*%tvec)))
sum(diag(B+C-2*expm::sqrtm(B%*%C))) # direct
library(T4Gauss)
library(microbenchmark)
mylist5d = list()
mycovs   = list()
for (i in 1:50){
my.ctd = stats::runif(5, min=-0.5, max=0.5)
my.sig = stats::cov(matrix(T4Gauss::rnorm(100*5),ncol=5))
mycovs[[i]] = my.sig
mylist5d[[i]] = wrapgaussNd(mu=my.ctd, sigma=my.sig)
}
rgd0 = gauss.barycenter(mylist5d, type="wass2rgd")
rgd3 = gauss.barycenter(mylist5d, type="wass2rgd", nthreads = 3)
rgd6 = gauss.barycenter(mylist5d, type="wass2rgd", nthreads = 6)
mylist5d = list()
mycovs   = list()
for (i in 1:50){
my.ctd = stats::runif(5, min=-0.5, max=0.5)
my.sig = stats::cov(matrix(T4Gauss::rnorm(100*5),ncol=5))
mycovs[[i]] = my.sig
mylist5d[[i]] = wrapgaussNd(mu=my.ctd, sigma=my.sig)
}
fpt = gauss.barycenter(mylist5d, type="wass2fpt")
fpt$sigma
rgd0 = gauss.barycenter(mylist5d, type="wass2rgd")
rgd0$sigma
library(T4Gauss)
sqrt(sum(diag(B+C-2*expm::sqrtm(B%*%C)))) # direct
sqrt(sum(diag(tvec%*%C%*%tvec)))
help("wrapgaussNd")
help(gauss.pdist)
# direct computation
gauss.pdist(x=wrapgaussNd(mu=rep(0,5), sigma=B), y=wrapgaussNd(mu=rep(0,5), sigma=C), type="wass2")
# direct computation
gauss.pdist(x=wrapgaussNd(mu=rep(0,5), sigma=B), y=wrapgaussNd(mu=rep(0,5), sigma=C), type="wass2")
# direct computation
gauss.pdist(x=wrapgaussNd(mu=rep(0,5), sigma=B), y=wrapgaussNd(mu=rep(0,5), sigma=C), type="wass2")
xx = list()
xx[[1]] = wrapgaussNd(mu=rep(0,5), sigma=B)
xx[[2]] = wrapgaussNd(mu=rep(0,5), sigma=C)
gauss.pdist(xx)
# direct computation
gauss.pdist(x=wrapgaussNd(mu=rep(0,5), sigma=B), y=wrapgaussNd(mu=rep(0,5), sigma=C), type="wass2")
B = matrix(rnorm(100),ncol=5)
B = t(B)%*%B
C = matrix(runif(100),ncol=5)
C = t(C)%*%C
tvec = (expm::sqrtm(B%*%C) + expm::sqrtm(C%*%B) - 2*C)
sqrt(sum(diag(tvec%*%C%*%tvec)))
# direct computation
gauss.pdist(x=wrapgaussNd(mu=rep(0,5), sigma=B), y=wrapgaussNd(mu=rep(0,5), sigma=C), type="wass2")
sqrt(sum(diag(B+C-2*expm::sqrtm(B%*%C)))) # direct
B = matrix(rnorm(100),ncol=5)
B = t(B)%*%B
C = matrix(runif(100),ncol=5)
C = t(C)%*%C
tvec = (expm::sqrtm(B%*%C) + expm::sqrtm(C%*%B) - 2*C)
sqrt(sum(diag(tvec%*%C%*%tvec)))
# direct computation
gauss.pdist(x=wrapgaussNd(mu=rep(0,5), sigma=B), y=wrapgaussNd(mu=rep(0,5), sigma=C), type="wass2")
sqrt(sum(diag(B+C-2*expm::sqrtm(B%*%C)))) # direct
# direct computation
xx = list()
xx[[1]] = wrapgaussNd(mu=rep(0,5), sigma=B)
xx[[2]] = wrapgaussNd(mu=rep(0,5), sigma=C)
gauss.pdist(xx, type = "wass2")
sqrt(sum(diag(B+C-2*expm::sqrtm(B%*%C)))) # direct
tvec = (expm::sqrtm(B%*%C) + expm::sqrtm(C%*%B) - 2*C)
sqrt(sum(diag(tvec%*%C%*%tvec)))
sqrt(sum(diag(tvec%*%C%*%tvec))/2)
sqrt(sum(diag(tvec%*%C%*%tvec))/4)
Chalf = expm::sqrtm(C)
sqrt(sum(diag(B+C-2*expm::sqrtm(Chalf%*%B%*%Chalf))))
sqrt(sum(diag(B+C-2*expm::sqrtm(B%*%C)))) # direct
sqrt(sum(diag(B+C-2*expm::sqrtm(Chalf%*%B%*%Chalf))))
library(T4Gauss)
# compare with barycenter
fmean  = gauss.barycenter(mylist5d)
fmedian = gauss.median(mylist5d)
library(T4Gauss)
## personal experiment with microbenchmark
library(microbenchmark)
mylist5d = list()
mycovs   = list()
for (i in 1:50){
my.ctd = stats::runif(5, min=-0.5, max=0.5)
my.sig = stats::cov(matrix(T4Gauss::rnorm(100*5),ncol=5))
mycovs[[i]] = my.sig
mylist5d[[i]] = wrapgaussNd(mu=my.ctd, sigma=my.sig)
}
# compare with barycenter
fmean   = gauss.barycenter(mylist5d)
fmedian = gauss.median(mylist5d)
dglist = mylist5d
# parameters
N = length(dglist)
p = dglist[[1]]$dimension
# stack all means and covs : be careful about the dimension
mean3 = array(0,c(N,p))
covs3 = array(0,c(p,p,N))
for (n in 1:N){
mean3[n,]  = as.vector(dglist[[n]]$mu)
covs3[,,n] = as.matrix(dglist[[n]]$sigma)
}
mean3
mean3riem = RiemBase::riemfactory(t(mean3), name="euclidean")
mean3riem
mout = as.vector(RiemBase::rbase.median(mean3riem$x))
mean3riem = RiemBase::riemfactory(t(mean3), name="euclidean")
mout = as.vector(RiemBase::rbase.median(mean3riem))
mout
mout = as.vector(RiemBase::rbase.median(mean3riem)$x)
mout
library(T4Gauss)
rm(list=ls())
library(T4Gauss)
## personal experiment with microbenchmark
library(microbenchmark)
mylist5d = list()
mycovs   = list()
for (i in 1:50){
my.ctd = stats::runif(5, min=-0.5, max=0.5)
my.sig = stats::cov(matrix(T4Gauss::rnorm(100*5),ncol=5))
mycovs[[i]] = my.sig
mylist5d[[i]] = wrapgaussNd(mu=my.ctd, sigma=my.sig)
}
# compare with barycenter
fmean   = gauss.barycenter(mylist5d)
fmedian = gauss.median(mylist5d)
fmedian
fmean$mu
fmedian$mu
par(mfrow=c(1,2), pty="s"); image(fmean$sigma,main="mean"); image(fmedian$sigma,main="median")
fmean$sigma
fmedian$sigma
library(T4Gauss)
my.sig
fmean = gauss.barycenter(mylist5d)
fmed0 = gauss.median(mylist5d)
fmed3 = gauss.median(mylist5d, nthreads = 3)
fmed0$sigma
fmed3$sigma
microbenchmark(
fmed0 = gauss.median(mylist5d, nthreads=0),
fmed3 = gauss.median(mylist5d, nthreads=3),
fmed6 = gauss.median(mylist5d, nthreads=6),
fmed9 = gauss.median(mylist5d, nthreads=9)
)
library(T4Gauss)
## generate three-cluster data with univariate Gaussians
mylist = list()
for (i in 1:10){
mylist[[i]] = wrapgauss1d(mean=-2-runif(1), sd=runif(1))
}
for (i in 11:20){
mylist[[i]] = wrapgauss1d(mean=0, sd=runif(1))
}
for (i in 21:30){
mylist[[i]] = wrapgauss1d(mean=2+runif(1), sd=runif(1))
}
## apply clustering with different k values
cl2 <- gauss.kmeans(mylist, k=2)$cluster
cl3 <- gauss.kmeans(mylist, k=3)$cluster
cl4 <- gauss.kmeans(mylist, k=4)$cluster
cl2
## generate three-cluster data with univariate Gaussians
mylist = list()
for (i in 1:10){
mylist[[i]] = wrapgauss1d(mean=-2-runif(1), sd=runif(1))
}
for (i in 11:20){
mylist[[i]] = wrapgauss1d(mean=0, sd=runif(1))
}
for (i in 21:30){
mylist[[i]] = wrapgauss1d(mean=2+runif(1), sd=runif(1))
}
## apply clustering with different k values
cl2 <- gauss.kmeans(mylist, k=2)$cluster
cl3 <- gauss.kmeans(mylist, k=3)$cluster
cl4 <- gauss.kmeans(mylist, k=4)
cl4
myn = 20
myk = 5
label.old = base::sample(c(base::sample(1:myk, myn-myk, replace=TRUE), 1:myk))
label.old
library(DAS)
help(kppseed)
library(T4Gauss)
cl2 <- gauss.kmeans(mylist, k=2)$cluster
cl3 <- gauss.kmeans(mylist, k=3)$cluster
cl4 <- gauss.kmeans(mylist, k=4)$cluster
## compute 2-dimensional embedding for visualization
mds2d <- gauss.mds(mylist, ndim=2)$embed
mdsx <- as.vector(mds2d[,1])
mdsy <- as.vector(mds2d[,2])
## visualize
opar = par(mfrow=c(1,3), pty="s")
plot(mdsx, mdsy, pch=19, col=cl2, main="k=2 means")
plot(mdsx, mdsy, pch=19, col=cl3, main="k=3 means")
plot(mdsx, mdsy, pch=19, col=cl4, main="k=4 means")
par(opar)
