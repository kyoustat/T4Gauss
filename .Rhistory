list5d[[j]] = wrapgaussNd(mu=vec.center, sigma=diag(5))
}
## compute pairwise distance
d5wass2 = distgauss(list5d)
## visualize
gcol <- gray((0:64)/64)
opar <- par(pty="s")
image(d5wass2[,40:1], col=gcol, axes=FALSE, main="wass2 pairwise distance")
par(opar)
vec.center  = rmvnorm(1, mu=rep(0,5)+1)
help(rmvnorm)
list5d = list()
for (i in 1:20){
vec.center  = rmvnorm(1, mean=rep(0,5))
list5d[[i]] = wrapgaussNd(mu=vec.center, sigma=diag(5))
}
for (j in 21:40){
vec.center  = rmvnorm(1, mean=rep(0,5)+1)
list5d[[j]] = wrapgaussNd(mu=vec.center, sigma=diag(5))
}
## compute pairwise distance
d5wass2 = distgauss(list5d)
## visualize
gcol <- gray((0:64)/64)
opar <- par(pty="s")
image(d5wass2[,40:1], col=gcol, axes=FALSE, main="wass2 pairwise distance")
par(opar)
list5d = list()
for (i in 1:20){
vec.center  = rmvnorm(1, mean=rep(0,5))
list5d[[i]] = wrapgaussNd(mu=vec.center, sigma=diag(5))
}
for (j in 21:40){
vec.center  = rmvnorm(1, mean=rep(0,5)+1)
list5d[[j]] = wrapgaussNd(mu=vec.center, sigma=diag(5))
}
## compute pairwise distance
d5wass2 = distgauss(list5d)
## visualize
gcol <- gray((0:64)/64)
opar <- par(pty="s")
image(d5wass2[,40:1], col=gcol, axes=FALSE, main="wass2 pairwise distance")
par(opar)
list5d = list()
for (i in 1:20){
vec.center  = rmvnorm(1, mean=rep(0,5))
list5d[[i]] = wrapgaussNd(mu=vec.center, sigma=diag(5))
}
for (j in 21:40){
vec.center  = rmvnorm(1, mean=rep(0,5)+1)
list5d[[j]] = wrapgaussNd(mu=vec.center, sigma=diag(5))
}
## compute pairwise distance
d5wass2 = distgauss(list5d)
## visualize
gcol <- gray((0:64)/64)
opar <- par(pty="s")
image(d5wass2[,40:1], col=gcol, axes=FALSE, main="wass2 pairwise distance")
par(opar)
list5d = list()
for (i in 1:20){
vec.center  = rmvnorm(1, mean=rep(0,5))
list5d[[i]] = wrapgaussNd(mu=vec.center, sigma=diag(5))
}
for (j in 21:40){
vec.center  = rmvnorm(1, mean=rep(0,5)+1)
list5d[[j]] = wrapgaussNd(mu=vec.center, sigma=diag(5))
}
## compute pairwise distance
d5wass2 = distgauss(list5d)
## visualize
gcol <- gray((0:64)/64)
opar <- par(pty="s")
image(d5wass2[,40:1], col=gcol, axes=FALSE, main="wass2 pairwise distance")
par(opar)
list5d = list()
for (i in 1:20){
vec.center  = rmvnorm(1, mean=rep(0,5))
list5d[[i]] = wrapgaussNd(mu=vec.center, sigma=diag(5))
}
for (j in 21:40){
vec.center  = rmvnorm(1, mean=rep(0,5)+5)
list5d[[j]] = wrapgaussNd(mu=vec.center, sigma=diag(5))
}
## compute pairwise distance
d5wass2 = distgauss(list5d)
## visualize
gcol <- gray((0:64)/64)
opar <- par(pty="s")
image(d5wass2[,40:1], col=gcol, axes=FALSE, main="wass2 pairwise distance")
par(opar)
## test with 5-dimensional Gaussian distributions
list5d = list()
for (i in 1:20){
vec.center  = rmvnorm(1, mean=rep(0,5))
list5d[[i]] = wrapgaussNd(mu=vec.center, sigma=diag(5))
}
for (j in 21:40){
vec.center  = rmvnorm(1, mean=rep(0,5)+3)
list5d[[j]] = wrapgaussNd(mu=vec.center, sigma=diag(5))
}
## compute pairwise distance
d5wass2 = distgauss(list5d)
## visualize
gcol <- gray((0:64)/64)
opar <- par(pty="s")
image(d5wass2[,40:1], col=gcol, axes=FALSE, main="wass2 pairwise distance")
par(opar)
## test with 5-dimensional Gaussian distributions
list5d = list()
for (i in 1:20){
vec.center  = rmvnorm(1, mean=rep(0,5))
list5d[[i]] = wrapgaussNd(mu=vec.center, sigma=diag(5))
}
for (j in 21:40){
vec.center  = rmvnorm(1, mean=rep(0,5)+3)
list5d[[j]] = wrapgaussNd(mu=vec.center, sigma=diag(5))
}
## compute pairwise distance
d5wass2 = distgauss(list5d)
## visualize
gcol <- gray((0:64)/64)
opar <- par(pty="s")
image(d5wass2[,40:1], col=gcol, axes=FALSE, main="wass2 pairwise distance")
par(opar)
## test with 5-dimensional Gaussian distributions
list5d = list()
for (i in 1:20){
vec.center  = rmvnorm(1, mean=rep(0,5))
list5d[[i]] = wrapgaussNd(mu=vec.center, sigma=diag(5))
}
for (j in 21:40){
vec.center  = rmvnorm(1, mean=rep(0,5)+3)
list5d[[j]] = wrapgaussNd(mu=vec.center, sigma=diag(5))
}
## compute pairwise distance
d5wass2 = distgauss(list5d)
## visualize
gcol <- gray((0:64)/64)
opar <- par(pty="s")
image(d5wass2[,40:1], col=gcol, axes=FALSE, main="wass2 pairwise distance")
par(opar)
isSymmetric(d5wass2)
## test with 5-dimensional Gaussian distributions
list5d = list()
for (i in 1:20){
vec.center  = rmvnorm(1, mean=rep(0,5))
list5d[[i]] = wrapgaussNd(mu=vec.center, sigma=diag(5))
}
mysig = matrix(rnorm(100*5), ncol=5)
mysig = t(mysig)%*%mysig
for (j in 21:40){
vec.center  = rmvnorm(1, mean=rep(0,5)+3)
list5d[[j]] = wrapgaussNd(mu=vec.center, sigma=mysig
}
## compute pairwise distance
d5wass2 = distgauss(list5d)
## visualize
gcol <- gray((0:64)/64)
opar <- par(pty="s")
image(d5wass2[,40:1], col=gcol, axes=FALSE, main="wass2 pairwise distance")
par(opar)
## test with 5-dimensional Gaussian distributions
list5d = list()
for (i in 1:20){
vec.center  = rmvnorm(1, mean=rep(0,5))
list5d[[i]] = wrapgaussNd(mu=vec.center, sigma=diag(5))
}
mysig = matrix(rnorm(100*5), ncol=5)
mysig = t(mysig)%*%mysig
for (j in 21:40){
vec.center  = rmvnorm(1, mean=rep(0,5)+3)
list5d[[j]] = wrapgaussNd(mu=vec.center, sigma=mysig
}
## compute pairwise distance
d5wass2 = distgauss(list5d)
## visualize
gcol <- gray((0:64)/64)
opar <- par(pty="s")
image(d5wass2[,40:1], col=gcol, axes=FALSE, main="wass2 pairwise distance")
par(opar)
list5d = list()
for (i in 1:20){
vec.center  = rmvnorm(1, mean=rep(0,5))
list5d[[i]] = wrapgaussNd(mu=vec.center, sigma=diag(5))
}
mysig = matrix(rnorm(100*5), ncol=5)
mysig = t(mysig)%*%mysig
for (j in 21:40){
vec.center  = rmvnorm(1, mean=rep(0,5)+3)
list5d[[j]] = wrapgaussNd(mu=vec.center, sigma=mysig)
}
## compute pairwise distance
d5wass2 = distgauss(list5d)
## visualize
gcol <- gray((0:64)/64)
opar <- par(pty="s")
image(d5wass2[,40:1], col=gcol, axes=FALSE, main="wass2 pairwise distance")
par(opar)
list5d = list()
for (i in 1:20){
vec.center  = rmvnorm(1, mean=rep(0,5))
list5d[[i]] = wrapgaussNd(mu=vec.center, sigma=diag(5))
}
mysig = matrix(rnorm(100*5), ncol=5)
mysig = t(mysig)%*%mysig
for (j in 21:40){
vec.center  = rmvnorm(1, mean=rep(0,5)+3)
list5d[[j]] = wrapgaussNd(mu=vec.center, sigma=mysig)
}
## compute pairwise distance
d5wass2 = distgauss(list5d)
## visualize
gcol <- gray((0:64)/64)
opar <- par(pty="s")
image(d5wass2[,40:1], col=gcol, axes=FALSE, main="wass2 pairwise distance")
par(opar)
mysig = matrix(rnorm(100*5), ncol=5)
mysig = t(mysig)%*%mysig
for (j in 21:40){
vec.center  = rmvnorm(1, mean=rep(0,5)+1.5)
list5d[[j]] = wrapgaussNd(mu=vec.center, sigma=mysig)
}
## compute pairwise distance
d5wass2 = distgauss(list5d)
## visualize
gcol <- gray((0:64)/64)
opar <- par(pty="s")
image(d5wass2[,40:1], col=gcol, axes=FALSE, main="wass2 pairwise distance")
par(opar)
mysig = matrix(rnorm(100*5), ncol=5)
mysig = t(mysig)%*%mysig
for (j in 21:40){
vec.center  = rmvnorm(1, mean=rep(0,5)+1.5)
list5d[[j]] = wrapgaussNd(mu=vec.center, sigma=mysig)
}
## compute pairwise distance
d5wass2 = distgauss(list5d)
## visualize
gcol <- gray((0:64)/64)
opar <- par(pty="s")
image(d5wass2[,40:1], col=gcol, axes=FALSE, main="wass2 pairwise distance")
par(opar)
mysig = matrix(rnorm(100*5), ncol=5)
mysig = t(mysig)%*%mysig
for (j in 21:40){
vec.center  = rmvnorm(1, mean=rep(0,5)+1.5)
list5d[[j]] = wrapgaussNd(mu=vec.center, sigma=mysig)
}
## compute pairwise distance
d5wass2 = distgauss(list5d)
## visualize
gcol <- gray((0:64)/64)
opar <- par(pty="s")
image(d5wass2[,40:1], col=gcol, axes=FALSE, main="wass2 pairwise distance")
par(opar)
isSymmetric(d5wass2)
library(T4Gauss)
## test with 1-dimensional Gaussian distributions
list1d = list()
for (i in 1:20){
val.center  = rnorm(1, sd=0.25)
list1d[[i]] = wrapgauss1d(mean=val.center, sd=1)
}
for (j in 21:40){
val.center  = rnorm(1, sd=0.25) + 2
list1d[[j]] = wrapgauss1d(mean=val.center, sd=1)
}
## compute pairwise distance
d1wass2 = distgauss(list1d)
## visualize
gcol <- gray((0:64)/64)
opar <- par(pty="s")
image(d1wass2[,40:1], col=gcol, axes=FALSE, main="wass2 pairwise distance")
par(opar)
## test with 1-dimensional Gaussian distributions
list1d = list()
for (i in 1:20){
val.center  = rnorm(1, sd=0.25)
list1d[[i]] = wrapgauss1d(mean=val.center, sd=1)
}
for (j in 21:40){
val.center  = rnorm(1, sd=0.25) + 2
list1d[[j]] = wrapgauss1d(mean=val.center, sd=1)
}
## compute pairwise distance
d1wass2 = distgauss(list1d)
## visualize
gcol <- gray((0:64)/64)
opar <- par(pty="s")
image(d1wass2[,40:1], col=gcol, axes=FALSE, main="wass2 pairwise distance")
par(opar)
## test with 1-dimensional Gaussian distributions
list1d = list()
for (i in 1:20){
val.center  = rnorm(1, sd=0.25)
list1d[[i]] = wrapgauss1d(mean=val.center, sd=1)
}
for (j in 21:40){
val.center  = rnorm(1, sd=0.25) + 2
list1d[[j]] = wrapgauss1d(mean=val.center, sd=1)
}
## compute pairwise distance
d1wass2 = distgauss(list1d)
## visualize
gcol <- gray((0:64)/64)
opar <- par(pty="s")
image(d1wass2[,40:1], col=gcol, axes=FALSE, main="wass2 pairwise distance")
par(opar)
list5d = list()
for (i in 1:20){
vec.center  = rmvnorm(1, mean=rep(0,5))
list5d[[i]] = wrapgaussNd(mu=vec.center, sigma=diag(5))
}
mysig = matrix(rnorm(100*5), ncol=5)
mysig = t(mysig)%*%mysig
for (j in 21:40){
vec.center  = rmvnorm(1, mean=rep(0,5)+1.5)
list5d[[j]] = wrapgaussNd(mu=vec.center, sigma=mysig)
}
## compute pairwise distance
d5wass2 = distgauss(list5d)
## visualize
gcol <- gray((0:64)/64)
opar <- par(pty="s")
image(d5wass2[,40:1], col=gcol, axes=FALSE, main="wass2 pairwise distance")
par(opar)
list5d = list()
for (i in 1:20){
vec.center  = rmvnorm(1, mean=rep(0,5))
list5d[[i]] = wrapgaussNd(mu=vec.center, sigma=diag(5))
}
mysig = matrix(rnorm(100*5), ncol=5)
mysig = t(mysig)%*%mysig
for (j in 21:40){
vec.center  = rmvnorm(1, mean=rep(0,5)+1.5)
list5d[[j]] = wrapgaussNd(mu=vec.center, sigma=mysig)
}
## compute pairwise distance
d5wass2 = distgauss(list5d)
## visualize
gcol <- gray((0:64)/64)
opar <- par(pty="s")
image(d5wass2[,40:1], col=gcol, axes=FALSE, main="wass2 pairwise distance")
par(opar)
list5d = list()
for (i in 1:20){
vec.center  = rmvnorm(1, mean=rep(0,5))
list5d[[i]] = wrapgaussNd(mu=vec.center, sigma=diag(5))
}
mysig = matrix(rnorm(100*5), ncol=5)
mysig = t(mysig)%*%mysig
for (j in 21:40){
vec.center  = rmvnorm(1, mean=rep(0,5)+1.5)
list5d[[j]] = wrapgaussNd(mu=vec.center, sigma=mysig)
}
## compute pairwise distance
d5wass2 = distgauss(list5d)
## visualize
gcol <- gray((0:64)/64)
opar <- par(pty="s")
image(d5wass2[,40:1], col=gcol, axes=FALSE, main="wass2 pairwise distance")
par(opar)
library(T4Gauss)
help(rmvnorm)
library(T4Gauss)
library(T4Gauss)
help("wrapgauss1d")
library(T4Gauss)
library(T4Gauss)
## test with 1-dimensional Gaussian distributions
obj.mean0 = wrapgauss1d(mean=0, sd=1)
obj.mean5 = wrapgauss1d(mean=5, sd=1)
obj.mean5 = wrapgauss1d(mean=5, sd=1)
obj.half  = interpgauss(obj.mean0, obj.mean1, t=0.5)
obj.half  = interpgauss(obj.mean0, obj.mean5, t=0.5)
obj.half$mu
obj.mean5
obj.half
obj.1 = wrapgauss1d(mean=1, sd=1)
obj.5 = wrapgauss1d(mean=5, sd=5)
obj1 = wrapgauss1d(mean=1, sd=1)
obj5 = wrapgauss1d(mean=5, sd=5)
## let's interpolate
obj.half  = interpgauss(obj1, obj5, t=0.5)
obj1
obj5
obj.half
library(T4Gauss)
library(T4Gauss)
library(T4Gauss)
library(T4Gauss)
devtools::load_all(".")
library(T4Gauss)
list1d = list()
for (i in 1:20){
val.center  = rnorm(1, sd=0.25)
list1d[[i]] = wrapgauss1d(mean=val.center, sd=1)
}
for (j in 21:40){
val.center  = rnorm(1, sd=0.25) + 2
list1d[[j]] = wrapgauss1d(mean=val.center, sd=1)
}
## compute pairwise distance
d1wass2 = gauss.pdist(list1d)
## visualize
gcol <- gray((0:64)/64)
opar <- par(pty="s")
image(d1wass2[,40:1], col=gcol, axes=FALSE, main="wass2 pairwise distance")
par(opar)
library(T4Gauss)
x1 = rmvnorm(50, mean=rep(-1,4))
x2 = rmvnorm(50, mean=rep(+1,4))
xx = rbind(x1, x2)
cl1 = fitgmm(xx, k=1)
library(T4Gauss)
cl1 = fitgmm(xx, k=1)
cl1$full$loglkd
tmpout = cl1$full
tmpout
tt = rnorm(4)
colnames(tt) = c("a","b","c","d")
cl2 = fitgmm(xx, k=2, method="diag")
cl2
tmpout = cl2$diag
tmpout
library(T4Gauss)
x1 = rmvnorm(50, mean=rep(-1,4))
x2 = rmvnorm(50, mean=rep(+1,4))
xx = rbind(x1, x2)
cl1 = fitgmm(xx, k=1)
cl2 = fitgmm(xx, k=2)
cl3 = fitgmm(xx, k=3)
cl1$criteria
cl1 = fitgmm(xx, k=1)$criteria
cl2 = fitgmm(xx, k=2)$criteria
cl3 = fitgmm(xx, k=3)$criteria
rbind(cl1,cl2,cl3)
yy = c(rnorm(30,mean=-1),rnorm(30,mean=1))
cy1 = fitgmm(yy, k=1)$criteria
cy2 = fitgmm(yy, k=2)$criteria
cy3 = fitgmm(yy, k=3)$criteria
rbind(cy1,cy2,cy3)
cls = array(0,c(10,3))
for (i in 1:10){
cls[i,] = as.vector(fitgmm(xx, k=i)$criteria)
}
cls = array(0,c(10,3))
for (i in 1:10){
cls[i,] = as.vector(fitgmm(xx, k=i, method="diag")$criteria)
}
cls = array(0,c(10,3))
for (i in 1:10){
cls[i,] = as.vector(fitgmm(xx, k=i, method="diag")$criteria)
}
cls = array(0,c(10,3))
for (i in 1:10){
cls[i,] = as.vector(fitgmm(xx, k=i, method="diag")$criteria)
print(paste("iteration ",i," complete..",sep=""))
}
cls
which.max(cls[,1])
which.max(cls[,2])
which.max(cls[,3])
plot(cls[,1])
plot(cls[,2])
plot(cls[,3])
cls = array(0,c(10,3))
for (i in 1:10){
cls[i,] = as.vector(fitgmm(xx, k=i, method="full")$criteria)
print(paste("iteration ",i," complete..",sep=""))
}
matplot(cls)
x1 = rmvnorm(50, mean=rep(-1,4))
x2 = rmvnorm(50, mean=rep(+1,4))
xx = rbind(x1, x2)
cl1 = fitgmm(xx, k=1)$criteria
cl2 = fitgmm(xx, k=2)$criteria
cl3 = fitgmm(xx, k=3)$criteria
cls = array(0,c(10,3))
for (i in 1:10){
cls[i,] = as.vector(fitgmm(xx, k=i, method="diag")$criteria)
print(paste("iteration ",i," complete..",sep=""))
}
library(T4Gauss)
x1 = rmvnorm(50, mean=rep(-1,4))
x2 = rmvnorm(50, mean=rep(+1,4))
xx = rbind(x1, x2)
cl1 = fitgmm(xx, k=1)$criteria
cl2 = fitgmm(xx, k=2)$criteria
cl3 = fitgmm(xx, k=3)$criteria
cls = array(0,c(10,3))
for (i in 1:10){
cls[i,] = as.vector(fitgmm(xx, k=i, method="diag")$criteria)
print(paste("iteration ",i," complete..",sep=""))
}
matplot(cls)
yy = c(rnorm(30,mean=-1),rnorm(30,mean=1))
cls = array(0,c(10,3))
for (i in 1:10){
cls[i,] = as.vector(fitgmm(yy, k=i, method="diag")$criteria)
print(paste("iteration ",i," complete..",sep=""))
}
matplot(cls)
library(T4Gauss)
library(T4Gauss)
cl3
cl3 = fitgmm(xx, k=3)
cl3
library(T4Gauss)
library(T4Gauss)
library(T4Gauss)
